*
 * Auto-Generated by NUKE!
 *   http://arbotix.googlecode.com
 *
 * See http://code.google.com/p/arbotix/wiki/NukeIntro
 *   for details on usage.
 */

#include <ax12.h>
#include <BioloidController.h>
#include <Commander.h>
#include "nuke.h"

Commander command = Commander();
/* The Commander protocol has values of -100 to 100, x/y/z speed are in mm/s
 * To go faster than 100mm/s, we can use this multiplier
 */
int multiplier;
int countH = 0;
int countV = 0;
int timestamp = 0;
int mil;


void setup(){
    pinMode(0, OUTPUT);
    pinMode(2, OUTPUT);

    SetPosition(13,512);
    
    // setup IK
    setupIK();
    gaitSelect(RIPPLE);
    // setup serial for usage with the Commander
    Serial.begin(38400);


    // wait, then check the voltage (LiPO safety)
    delay (1000);
    float voltage = (ax12GetRegister (1, AX_PRESENT_VOLTAGE, 1)) / 10.0;
    Serial.print ("System Voltage: ");
    Serial.print (voltage);
    Serial.println (" volts.");
//    if (voltage < 10.0)
//        while(1);

    // stand up slowly
    bioloid.poseSize = 12;
    bioloid.readPose();
    doIK();
    bioloid.interpolateSetup(1000);
    while(bioloid.interpolating > 0){
        bioloid.interpolateStep();
        delay(3);
    }
    multiplier = 1;
}

void loop(){
    
  // take commands

  if(command.ReadMsgs() > 0){
//    digitalWrite(0,HIGH-digitalRead(0));
    // select gaits
    if(command.buttons&BUT_R1){ gaitSelect(RIPPLE_SMOOTH); multiplier=1;}
    if(command.buttons&BUT_R2){ gaitSelect(RIPPLE); multiplier=1;}
    if(command.buttons&BUT_L4){ gaitSelect(AMBLE_SMOOTH); multiplier=2;}
    if(command.buttons&BUT_L5){ gaitSelect(AMBLE); multiplier=2;}
    
    
    // set speeds
    if(command.leftTrigger == 0) {
          Xspeed = multiplier*command.walkV;
          if((command.buttons&BUT_LT) > 0)
            Yspeed = (multiplier*command.walkH)/2;
          else
            Rspeed = -(multiplier*command.walkH)/250.0;
          bodyRotX = 0;
          bodyRotY = 0;
          bodyRotZ = 0;
    } else {
          bodyRotY = (((float)command.walkV))/250.0;
          if((command.buttons&BUT_RT) > 0)
            bodyRotX = ((float)command.walkH)/250.0;
          else
            bodyRotZ = ((float)command.walkH)/250.0;
          Xspeed = 0;
          Yspeed = 0;
          Rspeed = 0;
    }
  }


  mil = millis();
  if(command.rightTrigger == 1) {
    if((mil - timestamp) < 1100){
      digitalWrite(0, HIGH);
      digitalWrite(2, HIGH);
    } else {
      digitalWrite(0, LOW);
      digitalWrite(2, LOW);
    }
  }  else if(command.rightTrigger == 0){
    timestamp = mil;
    digitalWrite(0, LOW);
    digitalWrite(2, LOW);
  }
  
  
  countH +=  (int) command.lookH/6;
  SetPosition(13, 512 + countH);
  countV +=  (int) command.lookV/6;
  SetPosition(14, 512 + countV);


  int returnVel = 5;
  if(command.squareButton == 1) {
    if(countH >= 0) {
        countH -= returnVel;
        SetPosition(13, 512 + countH);
      } else if(countH < 0) {
        countH += returnVel;
        SetPosition(13, 512 + countH);
    }
    if(countV >= 0) {
        countV -= returnVel;
        SetPosition(14, 512 + countV);
      } else if(countV < 0) {
        countV += returnVel;
        SetPosition(14, 512 + countV);
    }
  }
  

  // if our previous interpolation is complete, recompute the IK
  if(bioloid.interpolating == 0){
    doIK();
    bioloid.interpolateSetup(tranTime);
  }

  // update joints
  bioloid.interpolateStep();
}

